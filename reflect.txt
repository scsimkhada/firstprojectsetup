this is git test


///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Subash Chandra Simkhada
Student ID#: 149827230
Email      : scsimkhada@myseneca.ca
Section    : ZFF

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.


1. In Part 2 of this workshop, you created several variables; how many did you create? Explain the importance of organizing them.

=> I created altogether 12 variables in part 2 of this workshop. They are:

a. C1, C2 and C3: They represents the type of coffee for three different products.
b. Cream_A, Cream_B and Cream_C: They represents whether cream is preferred or not.
c. Strength: It represents coffee strength preffered by user.
d. Cream_pref: It represents whether the user likes coffee with cream or not.
e. GRAMS_IN_LBS: It is constant to represent conversion factor from gram to pounds.
f. C1_wt, C2_wt, C3_wt: It represents the weight of coffee for three different products.

2. Select one calculation from your workshop that contains a Relational and a Logical expression, copy your submitted code for only this part of the logic, and then identify them and explain how they worked together.

=>One calculation that shows relational and logical expression is:
  ((Strength == 'L' || Strength == 'l') && (C1 == 'L' || C1 == 'l')) ||
  ((Strength == 'M' || Strength == 'm') && (C1 == 'M' || C1 == 'm')) ||
  ((Strength == 'R' || Strength == 'r') && (C1 == 'R' || C1 == 'r'))

Here, '==' is a relational operator and the expression is C1 == 'L' || C1 == 'l'.
      '&&' and '||' are logical operators and the expression is ((Strength == 'L' || Strength == 'l') && (C1 == 'L' || C1 == 'l')).

3.  What is DeMorganâ€™s Law? Give an example based on your code for this workshop where you can apply it?(provide the necessary code)
 
=> De Morgan's Laws can be defined as follows:

a. Negation of AND (Conjunction)if (!A || !B):A statement is false if either A is false or B is false.
b. Negation of OR (Disjunction) if (!A && !B):A statement is false only if both A and B are false.

In C programming, '&&' represents logical AND, ;||' represents logical OR, and '!' represents logical NOT (negation). Applying De Morgan's Laws involves changing the logical operations and flipping the conditions to achieve equivalent expressions.

Example based on my code:
Original code: ((Strength == 'L' || Strength == 'l') && (C1 == 'L' || C1 == 'l'))
Applying De Morgan's Law: !( (Strength == 'L' || Strength == 'l') && (C1 == 'L' || C1 == 'l') )
!(Strength == 'L' || Strength == 'l') || !(C1 == 'L' || C1 == 'l'),









///////////////////////////////////////////////////////////////////////////

